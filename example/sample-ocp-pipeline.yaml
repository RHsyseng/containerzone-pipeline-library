apiVersion: v1
kind: BuildConfig
metadata:
  creationTimestamp: null
  labels:
    name: sample-pipeline
  name: sample-pipeline
spec:
  nodeSelector: {}
  output: {}
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    type: None
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
          @Library('ContainerZone')
          import com.redhat.connect.*
          def secret = ""
          def projectid = ""
          def dockerImageDigest = ""
          def dockerCfg = ""
          def cz = null
          def uri = "https://stage-connect.redhat.com/api/container/scanResults"
          def imageName = "demo"
          def imageTag = "latest"
          def externalRegistryImageName = "${imageName}-ex-reg"
          node {
            stage('Get OpenShift Secret') {
                openshift.withCluster() {
                    def secret = openshift.selector('secret/container-zone').object()
                    dockerCfg = secret.data.'.dockercfg'
                }
            }
            stage('OpenShift Build') {
                openshiftBuild(buildConfig: "${externalRegistryImageName}", showBuildLogs: 'true')
            }
            stage('OpenShift ImageStreamImport') {
                cz = new com.redhat.connect.ContainerZone(dockerCfg)
                cz.setImageName(imageName)
                cz.setImageTag(imageTag)
                openshift.withCluster() {
                    def imageStreamImport = cz.getImageStreamImport(${externalRegistryImageName}, true)
                    def createImportImage = openshift.create( imageStreamImport )
                    def istagobj = openshift.selector( "istag/${externalRegistryImageName}:${imageTag}" ).object()
                    cz.setDockerImageDigest(istagobj.image.metadata.name)
                }
            }
            stage('Wait For Scan') {
                cz.setUri(uri)
                cz.waitForScan(20, 30)
            }
            stage('Scan Results') {
                def output = cz.getScanResults()
                wrap([$class: 'AnsiColorBuildWrapper']) {
                    print(output)
                }
            }
        }
    type: JenkinsPipeline
  triggers: []
